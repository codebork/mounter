// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus as dbus;
use dbus::arg;
use dbus::blocking;

pub trait DBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> DBusProperties for blocking::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>,)| Ok(r.0))
    }

    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,)| Ok(r.0))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }
}

#[derive(Debug)]
pub struct DBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for DBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for DBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait DBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> DBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait DBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> DBusPeer for blocking::Proxy<'a, C> {

    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String,)| Ok(r.0))
    }
}

pub trait UDisks2Partition {
    fn set_type(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn set_name(&self, name: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn set_flags(&self, flags: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn delete(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn get_number(&self) -> Result<u32, dbus::Error>;
    fn get_type(&self) -> Result<String, dbus::Error>;
    fn get_flags(&self) -> Result<u64, dbus::Error>;
    fn get_offset(&self) -> Result<u64, dbus::Error>;
    fn get_size(&self) -> Result<u64, dbus::Error>;
    fn get_name(&self) -> Result<String, dbus::Error>;
    fn get_uuid(&self) -> Result<String, dbus::Error>;
    fn get_table(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_is_container(&self) -> Result<bool, dbus::Error>;
    fn get_is_contained(&self) -> Result<bool, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> UDisks2Partition for blocking::Proxy<'a, C> {

    fn set_type(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "SetType", (type_, options, ))
    }

    fn set_name(&self, name: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "SetName", (name, options, ))
    }

    fn set_flags(&self, flags: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "SetFlags", (flags, options, ))
    }

    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "Resize", (size, options, ))
    }

    fn delete(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "Delete", (options, ))
    }

    fn get_number(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Number")
    }

    fn get_type(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Type")
    }

    fn get_flags(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Flags")
    }

    fn get_offset(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Offset")
    }

    fn get_size(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Size")
    }

    fn get_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Name")
    }

    fn get_uuid(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "UUID")
    }

    fn get_table(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Table")
    }

    fn get_is_container(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "IsContainer")
    }

    fn get_is_contained(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "IsContained")
    }
}

pub trait UDisks2Block {
    fn add_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn remove_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn update_configuration_item(&self, old_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), new_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn get_secret_configuration(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
    fn format(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn open_for_backup(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error>;
    fn open_for_restore(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error>;
    fn open_for_benchmark(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error>;
    fn open_device(&self, mode: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error>;
    fn rescan(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn get_device(&self) -> Result<Vec<u8>, dbus::Error>;
    fn get_preferred_device(&self) -> Result<Vec<u8>, dbus::Error>;
    fn get_symlinks(&self) -> Result<Vec<Vec<u8>>, dbus::Error>;
    fn get_device_number(&self) -> Result<u64, dbus::Error>;
    fn get_id(&self) -> Result<String, dbus::Error>;
    fn get_size(&self) -> Result<u64, dbus::Error>;
    fn get_read_only(&self) -> Result<bool, dbus::Error>;
    fn get_drive(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_mdraid(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_mdraid_member(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_id_usage(&self) -> Result<String, dbus::Error>;
    fn get_id_type(&self) -> Result<String, dbus::Error>;
    fn get_id_version(&self) -> Result<String, dbus::Error>;
    fn get_id_label(&self) -> Result<String, dbus::Error>;
    fn get_id_uuid(&self) -> Result<String, dbus::Error>;
    fn get_configuration(&self) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
    fn get_crypto_backing_device(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_hint_partitionable(&self) -> Result<bool, dbus::Error>;
    fn get_hint_system(&self) -> Result<bool, dbus::Error>;
    fn get_hint_ignore(&self) -> Result<bool, dbus::Error>;
    fn get_hint_auto(&self) -> Result<bool, dbus::Error>;
    fn get_hint_name(&self) -> Result<String, dbus::Error>;
    fn get_hint_icon_name(&self) -> Result<String, dbus::Error>;
    fn get_hint_symbolic_icon_name(&self) -> Result<String, dbus::Error>;
    fn get_userspace_mount_options(&self) -> Result<Vec<String>, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> UDisks2Block for blocking::Proxy<'a, C> {

    fn add_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "AddConfigurationItem", (item, options, ))
    }

    fn remove_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "RemoveConfigurationItem", (item, options, ))
    }

    fn update_configuration_item(&self, old_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), new_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "UpdateConfigurationItem", (old_item, new_item, options, ))
    }

    fn get_secret_configuration(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "GetSecretConfiguration", (options, ))
            .and_then(|r: (Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>,)| Ok(r.0))
    }

    fn format(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "Format", (type_, options, ))
    }

    fn open_for_backup(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenForBackup", (options, ))
            .and_then(|r: (dbus::arg::OwnedFd,)| Ok(r.0))
    }

    fn open_for_restore(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenForRestore", (options, ))
            .and_then(|r: (dbus::arg::OwnedFd,)| Ok(r.0))
    }

    fn open_for_benchmark(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenForBenchmark", (options, ))
            .and_then(|r: (dbus::arg::OwnedFd,)| Ok(r.0))
    }

    fn open_device(&self, mode: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenDevice", (mode, options, ))
            .and_then(|r: (dbus::arg::OwnedFd,)| Ok(r.0))
    }

    fn rescan(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "Rescan", (options, ))
    }

    fn get_device(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Device")
    }

    fn get_preferred_device(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "PreferredDevice")
    }

    fn get_symlinks(&self) -> Result<Vec<Vec<u8>>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Symlinks")
    }

    fn get_device_number(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "DeviceNumber")
    }

    fn get_id(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Id")
    }

    fn get_size(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Size")
    }

    fn get_read_only(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "ReadOnly")
    }

    fn get_drive(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Drive")
    }

    fn get_mdraid(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "MDRaid")
    }

    fn get_mdraid_member(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "MDRaidMember")
    }

    fn get_id_usage(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdUsage")
    }

    fn get_id_type(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdType")
    }

    fn get_id_version(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdVersion")
    }

    fn get_id_label(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdLabel")
    }

    fn get_id_uuid(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdUUID")
    }

    fn get_configuration(&self) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Configuration")
    }

    fn get_crypto_backing_device(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "CryptoBackingDevice")
    }

    fn get_hint_partitionable(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintPartitionable")
    }

    fn get_hint_system(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintSystem")
    }

    fn get_hint_ignore(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintIgnore")
    }

    fn get_hint_auto(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintAuto")
    }

    fn get_hint_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintName")
    }

    fn get_hint_icon_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintIconName")
    }

    fn get_hint_symbolic_icon_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintSymbolicIconName")
    }

    fn get_userspace_mount_options(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "UserspaceMountOptions")
    }
}

pub trait UDisks2Encrypted {
    fn unlock(&self, passphrase: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::Path<'static>, dbus::Error>;
    fn lock(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn change_passphrase(&self, passphrase: &str, new_passphrase: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn get_child_configuration(&self) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
    fn get_hint_encryption_type(&self) -> Result<String, dbus::Error>;
    fn get_metadata_size(&self) -> Result<u64, dbus::Error>;
    fn get_cleartext_device(&self) -> Result<dbus::Path<'static>, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> UDisks2Encrypted for blocking::Proxy<'a, C> {

    fn unlock(&self, passphrase: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Encrypted", "Unlock", (passphrase, options, ))
            .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn lock(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Encrypted", "Lock", (options, ))
    }

    fn change_passphrase(&self, passphrase: &str, new_passphrase: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Encrypted", "ChangePassphrase", (passphrase, new_passphrase, options, ))
    }

    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Encrypted", "Resize", (size, options, ))
    }

    fn get_child_configuration(&self) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Encrypted", "ChildConfiguration")
    }

    fn get_hint_encryption_type(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Encrypted", "HintEncryptionType")
    }

    fn get_metadata_size(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Encrypted", "MetadataSize")
    }

    fn get_cleartext_device(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Encrypted", "CleartextDevice")
    }
}
