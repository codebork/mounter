// This code was autogenerated with `dbus-codegen-rust -s -d org.freedesktop.UDisks2 -p /org/freedesktop/UDisks2/block_devices/sda1 -m None -i org.freedesktop`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
use dbus::arg;
use dbus::blocking;

pub trait DBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> DBusProperties for blocking::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn get_all(&self, interface_name: &str) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, )| Ok(r.0, ))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }
}

#[derive(Debug)]
pub struct DBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for DBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for DBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(DBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for DBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub trait DBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> DBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait DBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> DBusPeer for blocking::Proxy<'a, C> {

    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait UDisks2Filesystem {
    fn set_label(&self, label: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn mount(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<String, dbus::Error>;
    fn unmount(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn check(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<bool, dbus::Error>;
    fn repair(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<bool, dbus::Error>;
    fn take_ownership(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn mount_points(&self) -> Result<Vec<Vec<u8>>, dbus::Error>;
    fn size(&self) -> Result<u64, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> UDisks2Filesystem for blocking::Proxy<'a, C> {

    fn set_label(&self, label: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Filesystem", "SetLabel", (label, options, ))
    }

    fn mount(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Filesystem", "Mount", (options, ))
            .and_then(|r: (String, )| Ok(r.0, ))
    }

    fn unmount(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Filesystem", "Unmount", (options, ))
    }

    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Filesystem", "Resize", (size, options, ))
    }

    fn check(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<bool, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Filesystem", "Check", (options, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn repair(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<bool, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Filesystem", "Repair", (options, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn take_ownership(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Filesystem", "TakeOwnership", (options, ))
    }

    fn mount_points(&self) -> Result<Vec<Vec<u8>>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Filesystem", "MountPoints")
    }

    fn size(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Filesystem", "Size")
    }
}

pub trait UDisks2Partition {
    fn set_type(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn set_name(&self, name: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn set_flags(&self, flags: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn delete(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn number(&self) -> Result<u32, dbus::Error>;
    fn type_(&self) -> Result<String, dbus::Error>;
    fn flags(&self) -> Result<u64, dbus::Error>;
    fn offset(&self) -> Result<u64, dbus::Error>;
    fn size(&self) -> Result<u64, dbus::Error>;
    fn name(&self) -> Result<String, dbus::Error>;
    fn uuid(&self) -> Result<String, dbus::Error>;
    fn table(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn is_container(&self) -> Result<bool, dbus::Error>;
    fn is_contained(&self) -> Result<bool, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> UDisks2Partition for blocking::Proxy<'a, C> {

    fn set_type(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "SetType", (type_, options, ))
    }

    fn set_name(&self, name: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "SetName", (name, options, ))
    }

    fn set_flags(&self, flags: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "SetFlags", (flags, options, ))
    }

    fn resize(&self, size: u64, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "Resize", (size, options, ))
    }

    fn delete(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Partition", "Delete", (options, ))
    }

    fn number(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Number")
    }

    fn type_(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Type")
    }

    fn flags(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Flags")
    }

    fn offset(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Offset")
    }

    fn size(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Size")
    }

    fn name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Name")
    }

    fn uuid(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "UUID")
    }

    fn table(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "Table")
    }

    fn is_container(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "IsContainer")
    }

    fn is_contained(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Partition", "IsContained")
    }
}

pub trait UDisks2Block {
    fn add_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn remove_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn update_configuration_item(&self, old_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), new_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn get_secret_configuration(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
    fn format(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn open_for_backup(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error>;
    fn open_for_restore(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error>;
    fn open_for_benchmark(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error>;
    fn open_device(&self, mode: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error>;
    fn rescan(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error>;
    fn device(&self) -> Result<Vec<u8>, dbus::Error>;
    fn preferred_device(&self) -> Result<Vec<u8>, dbus::Error>;
    fn symlinks(&self) -> Result<Vec<Vec<u8>>, dbus::Error>;
    fn device_number(&self) -> Result<u64, dbus::Error>;
    fn id(&self) -> Result<String, dbus::Error>;
    fn size(&self) -> Result<u64, dbus::Error>;
    fn read_only(&self) -> Result<bool, dbus::Error>;
    fn drive(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn mdraid(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn mdraid_member(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn id_usage(&self) -> Result<String, dbus::Error>;
    fn id_type(&self) -> Result<String, dbus::Error>;
    fn id_version(&self) -> Result<String, dbus::Error>;
    fn id_label(&self) -> Result<String, dbus::Error>;
    fn id_uuid(&self) -> Result<String, dbus::Error>;
    fn configuration(&self) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
    fn crypto_backing_device(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn hint_partitionable(&self) -> Result<bool, dbus::Error>;
    fn hint_system(&self) -> Result<bool, dbus::Error>;
    fn hint_ignore(&self) -> Result<bool, dbus::Error>;
    fn hint_auto(&self) -> Result<bool, dbus::Error>;
    fn hint_name(&self) -> Result<String, dbus::Error>;
    fn hint_icon_name(&self) -> Result<String, dbus::Error>;
    fn hint_symbolic_icon_name(&self) -> Result<String, dbus::Error>;
    fn userspace_mount_options(&self) -> Result<Vec<String>, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> UDisks2Block for blocking::Proxy<'a, C> {

    fn add_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "AddConfigurationItem", (item, options, ))
    }

    fn remove_configuration_item(&self, item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "RemoveConfigurationItem", (item, options, ))
    }

    fn update_configuration_item(&self, old_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), new_item: (&str, ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>), options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "UpdateConfigurationItem", (old_item, new_item, options, ))
    }

    fn get_secret_configuration(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "GetSecretConfiguration", (options, ))
            .and_then(|r: (Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, )| Ok(r.0, ))
    }

    fn format(&self, type_: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "Format", (type_, options, ))
    }

    fn open_for_backup(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenForBackup", (options, ))
            .and_then(|r: (arg::OwnedFd, )| Ok(r.0, ))
    }

    fn open_for_restore(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenForRestore", (options, ))
            .and_then(|r: (arg::OwnedFd, )| Ok(r.0, ))
    }

    fn open_for_benchmark(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenForBenchmark", (options, ))
            .and_then(|r: (arg::OwnedFd, )| Ok(r.0, ))
    }

    fn open_device(&self, mode: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<arg::OwnedFd, dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "OpenDevice", (mode, options, ))
            .and_then(|r: (arg::OwnedFd, )| Ok(r.0, ))
    }

    fn rescan(&self, options: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.UDisks2.Block", "Rescan", (options, ))
    }

    fn device(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Device")
    }

    fn preferred_device(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "PreferredDevice")
    }

    fn symlinks(&self) -> Result<Vec<Vec<u8>>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Symlinks")
    }

    fn device_number(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "DeviceNumber")
    }

    fn id(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Id")
    }

    fn size(&self) -> Result<u64, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Size")
    }

    fn read_only(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "ReadOnly")
    }

    fn drive(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Drive")
    }

    fn mdraid(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "MDRaid")
    }

    fn mdraid_member(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "MDRaidMember")
    }

    fn id_usage(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdUsage")
    }

    fn id_type(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdType")
    }

    fn id_version(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdVersion")
    }

    fn id_label(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdLabel")
    }

    fn id_uuid(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "IdUUID")
    }

    fn configuration(&self) -> Result<Vec<(String, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "Configuration")
    }

    fn crypto_backing_device(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "CryptoBackingDevice")
    }

    fn hint_partitionable(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintPartitionable")
    }

    fn hint_system(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintSystem")
    }

    fn hint_ignore(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintIgnore")
    }

    fn hint_auto(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintAuto")
    }

    fn hint_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintName")
    }

    fn hint_icon_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintIconName")
    }

    fn hint_symbolic_icon_name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "HintSymbolicIconName")
    }

    fn userspace_mount_options(&self) -> Result<Vec<String>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.freedesktop.UDisks2.Block", "UserspaceMountOptions")
    }
}
